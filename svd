function varargout = new(varargin)

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',  mfilename, ...
'gui_Singleton',  gui_Singleton, ...
'gui_OpeningFcn',  @new_OpeningFcn, ...
'gui_OutputFcn',  @new_OutputFcn, ...
'gui_LayoutFcn', [] , ...
'gui_Callback', []);
if nargin && ischar(varargin{1})
gui_State.gui_Callback = str2func(varargin{1});
end
if nargout
[varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

% --- Executes just before new is made visible.
function new_OpeningFcn(hObject, eventdata, handles, varargin)

% Choose default command line output for new
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% --- Outputs from this function are returned to the command line.
function varargout = new_OutputFcn(hObject, eventdata, handles)

% Get default command line output from handles structure
varargout{1} = handles.output;
% --- Executes on button press in input_image.
function input_image_Callback(hObject, eventdata, handles)

[fn pn]=uigetfile({'*.jpg';'*.tif'},'select image file');
image=strcat(pn,fn);
axes(handles.axes1);
imshow(image)
set(handles.location_of_image,'string',fn);
handles.image=image;
guidata(hObject,handles);

function input_watermark_Callback(hObject, eventdata, handles)
[fn pn]=uigetfile({'*.jpg';'*.tif'},'select image file');
watermarkimage=strcat(pn,fn);
axes(handles.axes2);
imshow(watermarkimage)
set(handles.watermark,'string',fn);
handles.wimage=watermarkimage;guidata(hObject,handles);


function take_alpha_Callback(hObject, eventdata, handles)
function take_alpha_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'),
get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
% --- Executes on button press in get_watermarked_image.
function get_watermarked_image_Callback(hObject, eventdata, handles)
Wimg=handles.Wimg;
y=uint8(Wimg);
figure,
imshow(y)

function get_psnr_Callback(hObject, eventdata, handles)
mse1=handles.mse1;
mse2=handles.mse2;
image2=handles.image2;
Wimg=handles.Wimg;
PSNR=10*log10(255^2./mse1);
msg=sprintf('\n\n-------------------------\nPSNR of watermarked image
=%fdB\n-----------------------------\n\n', PSNR);
disp(msg);
PSNR=10*log10(255^2./mse2);
msg=sprintf('\n\n-------------------------\nPSNR of the extracted watermark
=%fdB\n-----------------------------\n\n', PSNR);
disp(msg);

function location_of_image_Callback(hObject, eventdata, handles)
function location_of_image_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'),
get(0,'defaultUicontrolBackgroundColor'))
set(hObject,'BackgroundColor','white');
end
function watermark_Callback(hObject, eventdata, handles)

function watermark_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'),
get(0,'defaultUicontrolBackgroundColor'))
set(hObject,'BackgroundColor','white');
end

function pushbutton6_Callback(hObject, eventdata, handles)
o= get(handles.take_alpha,'String'); %edit1 being Tag of ur edit box
if isempty(o)
fprintf('Error: Enter Text first\n');
else
image2=handles.image;
image2=imread(image2);
image2=rgb2gray(image2);
image2=imresize(image2,[256 256]);
wimage1=handles.wimage;
wimage1=imread(wimage1);
wimage1=rgb2gray(wimage1);
wimage1=imresize(wimage1,[256 256]);
handles.wimage1=wimage1;
disp('hi')
[M,N]=size(image2);
handles.M=M;
handles.N=N;
image2=double(image2);
[Uimg,Simg,Vimg]=svd(image2);
Simg_temp=Simg;
handles.Simg_temp=Simg_temp;
handles.take_alpha=o;o=str2double(o);
[x, y]=size(wimage1);
handles.x=x;
handles.y=y;
wimage1=double(wimage1);
for i=1:x
for j=1:y
Simg(i,j) =Simg(i,j) + o * wimage1(i,j);
end
end

[U_SHL_w,S_SHL_w,V_SHL_w]=svd(Simg);
handles.U_SHL_w=U_SHL_w;
handles.V_SHL_w=V_SHL_w;
Wimg =Uimg* S_SHL_w * Vimg';

handles.Wimg=Wimg;
handles.image2=image2;
guidata(hObject,handles);
disp('hmm')
% figure,
% imshow(y)
end

function extracted_Watermark_Callback(hObject, eventdata, handles)
Wimg=handles.Wimg;
figure
Wimg=uint8(Wimg);
title('watermarked image with noise')
imshow(Wimg);
Wimg=imresize(Wimg,[256 256]);
Wimg=double(Wimg);V_SHL_w=handles.V_SHL_w;
U_SHL_w=handles.U_SHL_w;
[UWimg,SWimg,VWimg]=svd(Wimg);
Simg_temp=handles.Simg_temp;
D_1=U_SHL_w * SWimg * V_SHL_w';
o=handles.take_alpha;
o=str2double(o);
x=handles.x;
y=handles.y;
for i=1:x
for j=1:y
Watermark(i,j)= (D_1(i,j) - Simg_temp(i,j) )/o ;
end
end
figure(8)
imshow(uint8(Watermark));
handles.Watermark=Watermark;
title('The extracted watermark')
guidata(hObject,handles);
% --- Executes on button press in get_mse.
function get_mse_Callback(hObject, eventdata, handles)
image2=handles.image2;
Wimg=handles.Wimg;
M=handles.M;
N=handles.N;
image2=double(image2);
Wimg=double(Wimg);
error = image2 - (Wimg);
mse1 = sum(sum(error .* error)) / (M * N);
handles.mse1=mse1;
msg=sprintf('\n\n-------------------------\nmse of watermarked image
=%fdB\n-----------------------------\n\n', mse1);
disp(msg);
wimage1=handles.wimage1;
Watermark=handles.Watermark;
wimage1=double(wimage1);
Watermark=double(Watermark);
error = wimage1 - (Watermark);
mse2 = sum(sum(error .* error)) / (M * N);
handles.mse2=mse2;
msg=sprintf('\n\n-------------------------\nmse of the extracted watermark
=%fdB\n-----------------------------\n\n', mse2);
disp(msg);
r = corr2(wimage1,Watermark);
disp(r);
guidata(hObject,handles);

function get_snr_Callback(hObject, eventdata, handles)
Wimg=handles.Wimg;
ima=max(Wimg(:));
imi=min(Wimg(:));
ims=std(Wimg(:));
snr1=20*log10((ima-imi)./ims)
msg=sprintf('\n\n-------------------------\nsnr of watermarked image
=%fdB\n-----------------------------\n\n', snr1);
disp(msg);
Watermark=handles.Watermark;
ima=max(Watermark(:));
imi=min(Watermark(:));
ims=std(Watermark(:));
snr2=20*log10((ima-imi)./ims)
msg=sprintf('\n\n-------------------------\nsnr of extracted watermark
=%fdB\n-----------------------------\n\n', snr2);
disp(msg);

function display_Callback(hObject, eventdata, handles)

function display_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'),
get(0,'defaultUicontrolBackgroundColor'))set(hObject,'BackgroundColor','white');
end












